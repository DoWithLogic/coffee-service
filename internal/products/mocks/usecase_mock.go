// Code generated by MockGen. DO NOT EDIT.
// Source: internal/products/usecase.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	dtos "github.com/DoWithLogic/coffee-service/internal/products/dtos"
	gomock "go.uber.org/mock/gomock"
)

// MockUsecase is a mock of Usecase interface.
type MockUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUsecaseMockRecorder
}

// MockUsecaseMockRecorder is the mock recorder for MockUsecase.
type MockUsecaseMockRecorder struct {
	mock *MockUsecase
}

// NewMockUsecase creates a new mock instance.
func NewMockUsecase(ctrl *gomock.Controller) *MockUsecase {
	mock := &MockUsecase{ctrl: ctrl}
	mock.recorder = &MockUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsecase) EXPECT() *MockUsecaseMockRecorder {
	return m.recorder
}

// CreateMenuCategory mocks base method.
func (m *MockUsecase) CreateMenuCategory(ctx context.Context, menuCategory *dtos.MenuCategory) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMenuCategory", ctx, menuCategory)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMenuCategory indicates an expected call of CreateMenuCategory.
func (mr *MockUsecaseMockRecorder) CreateMenuCategory(ctx, menuCategory interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMenuCategory", reflect.TypeOf((*MockUsecase)(nil).CreateMenuCategory), ctx, menuCategory)
}

// DetailMenuCategory mocks base method.
func (m *MockUsecase) DetailMenuCategory(ctx context.Context, menuCategoryID int64) (dtos.MenuCategory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetailMenuCategory", ctx, menuCategoryID)
	ret0, _ := ret[0].(dtos.MenuCategory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DetailMenuCategory indicates an expected call of DetailMenuCategory.
func (mr *MockUsecaseMockRecorder) DetailMenuCategory(ctx, menuCategoryID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetailMenuCategory", reflect.TypeOf((*MockUsecase)(nil).DetailMenuCategory), ctx, menuCategoryID)
}

// ListMenuCategory mocks base method.
func (m *MockUsecase) ListMenuCategory(ctx context.Context) (dtos.MenuCategories, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMenuCategory", ctx)
	ret0, _ := ret[0].(dtos.MenuCategories)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMenuCategory indicates an expected call of ListMenuCategory.
func (mr *MockUsecaseMockRecorder) ListMenuCategory(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMenuCategory", reflect.TypeOf((*MockUsecase)(nil).ListMenuCategory), ctx)
}

// UpdateMenuCategory mocks base method.
func (m *MockUsecase) UpdateMenuCategory(ctx context.Context, request dtos.UpdateMenuCategoryRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMenuCategory", ctx, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMenuCategory indicates an expected call of UpdateMenuCategory.
func (mr *MockUsecaseMockRecorder) UpdateMenuCategory(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMenuCategory", reflect.TypeOf((*MockUsecase)(nil).UpdateMenuCategory), ctx, request)
}
