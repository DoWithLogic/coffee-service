// Code generated by MockGen. DO NOT EDIT.
// Source: internal/products/repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entities "github.com/DoWithLogic/coffee-service/internal/products/entities"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// DetailMenuCategoryByID mocks base method.
func (m *MockRepository) DetailMenuCategoryByID(ctx context.Context, menuCategoryID int64) (entities.MenuCategory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetailMenuCategoryByID", ctx, menuCategoryID)
	ret0, _ := ret[0].(entities.MenuCategory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DetailMenuCategoryByID indicates an expected call of DetailMenuCategoryByID.
func (mr *MockRepositoryMockRecorder) DetailMenuCategoryByID(ctx, menuCategoryID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetailMenuCategoryByID", reflect.TypeOf((*MockRepository)(nil).DetailMenuCategoryByID), ctx, menuCategoryID)
}

// InsertMenuCategory mocks base method.
func (m *MockRepository) InsertMenuCategory(ctx context.Context, menuCategory *entities.MenuCategory) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertMenuCategory", ctx, menuCategory)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertMenuCategory indicates an expected call of InsertMenuCategory.
func (mr *MockRepositoryMockRecorder) InsertMenuCategory(ctx, menuCategory interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertMenuCategory", reflect.TypeOf((*MockRepository)(nil).InsertMenuCategory), ctx, menuCategory)
}

// MenuCategories mocks base method.
func (m *MockRepository) MenuCategories(ctx context.Context) (entities.MenuCategories, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MenuCategories", ctx)
	ret0, _ := ret[0].(entities.MenuCategories)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MenuCategories indicates an expected call of MenuCategories.
func (mr *MockRepositoryMockRecorder) MenuCategories(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MenuCategories", reflect.TypeOf((*MockRepository)(nil).MenuCategories), ctx)
}

// UpdateMenuCategoryByID mocks base method.
func (m *MockRepository) UpdateMenuCategoryByID(ctx context.Context, menuCategory entities.UpdateMenuCategory) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMenuCategoryByID", ctx, menuCategory)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMenuCategoryByID indicates an expected call of UpdateMenuCategoryByID.
func (mr *MockRepositoryMockRecorder) UpdateMenuCategoryByID(ctx, menuCategory interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMenuCategoryByID", reflect.TypeOf((*MockRepository)(nil).UpdateMenuCategoryByID), ctx, menuCategory)
}
