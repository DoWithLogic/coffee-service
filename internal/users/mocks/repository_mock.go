// Code generated by MockGen. DO NOT EDIT.
// Source: internal/users/repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entities "github.com/DoWithLogic/coffee-service/internal/users/entities"
	gomock "go.uber.org/mock/gomock"
)

// MockRepositories is a mock of Repositories interface.
type MockRepositories struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoriesMockRecorder
}

// MockRepositoriesMockRecorder is the mock recorder for MockRepositories.
type MockRepositoriesMockRecorder struct {
	mock *MockRepositories
}

// NewMockRepositories creates a new mock instance.
func NewMockRepositories(ctrl *gomock.Controller) *MockRepositories {
	mock := &MockRepositories{ctrl: ctrl}
	mock.recorder = &MockRepositoriesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositories) EXPECT() *MockRepositoriesMockRecorder {
	return m.recorder
}

// InsertUsers mocks base method.
func (m *MockRepositories) InsertUsers(ctx context.Context, users *entities.Users) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertUsers", ctx, users)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertUsers indicates an expected call of InsertUsers.
func (mr *MockRepositoriesMockRecorder) InsertUsers(ctx, users interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertUsers", reflect.TypeOf((*MockRepositories)(nil).InsertUsers), ctx, users)
}

// UpdateUserPoint mocks base method.
func (m *MockRepositories) UpdateUserPoint(ctx context.Context, request entities.UpdateUserPoint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserPoint", ctx, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserPoint indicates an expected call of UpdateUserPoint.
func (mr *MockRepositoriesMockRecorder) UpdateUserPoint(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserPoint", reflect.TypeOf((*MockRepositories)(nil).UpdateUserPoint), ctx, request)
}

// UpdateUserProfile mocks base method.
func (m *MockRepositories) UpdateUserProfile(ctx context.Context, users entities.UpdateUserProfile) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserProfile", ctx, users)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserProfile indicates an expected call of UpdateUserProfile.
func (mr *MockRepositoriesMockRecorder) UpdateUserProfile(ctx, users interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserProfile", reflect.TypeOf((*MockRepositories)(nil).UpdateUserProfile), ctx, users)
}

// UserDetail mocks base method.
func (m *MockRepositories) UserDetail(ctx context.Context, userID int64) (entities.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserDetail", ctx, userID)
	ret0, _ := ret[0].(entities.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserDetail indicates an expected call of UserDetail.
func (mr *MockRepositoriesMockRecorder) UserDetail(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserDetail", reflect.TypeOf((*MockRepositories)(nil).UserDetail), ctx, userID)
}

// UserDetailByEmail mocks base method.
func (m *MockRepositories) UserDetailByEmail(ctx context.Context, Email string) (entities.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserDetailByEmail", ctx, Email)
	ret0, _ := ret[0].(entities.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserDetailByEmail indicates an expected call of UserDetailByEmail.
func (mr *MockRepositoriesMockRecorder) UserDetailByEmail(ctx, Email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserDetailByEmail", reflect.TypeOf((*MockRepositories)(nil).UserDetailByEmail), ctx, Email)
}
